-- ds.site-page: Design: tauri in Kulfi

-- ds.heading-large: Design: `tauri` in Kulfi



-- ds.heading-medium: App Window: Two Web-views

https://github.com/tauri-apps/tauri/blob/dev/examples/multiwebview/main.rs

In every application window we will have two web views, one on top showing
content, and the second one below it, the status bar.

The status bar will show the current site URL, back/forward buttons, ability to
copy the url etc. The url is editable on click, so it can also be called
navigation bar.



-- ds.heading-medium: DNS Record

We can create `TXT` record of some format so we can make `kulfi://amitu.com`
also work with our browser. If a non `id52`, non alias `<name>` is found, we do
DNS lookup for the `<name>`, and if found we will render it.

-- ds.heading-small: DNS `http-bridge`

Any site that is kulfi only, can create a DNS A record to point to the IP of
FifthTry's (or any) `http-bridge`, and the `http-bridge` will do the DNS
resolution, and find the `TXT` record to find the `id52` and pass the request
to that `id52`.


-- ds.heading-medium: Home Screen

When the page starts, the "home screen" is launched. This is a simple page
`kulfi://<id52-of-kulfi-device>`, which will kind of look like home screen of a
mobile device. It will show icon for all the apps that are "installed". Any
kulfi-site you visit it can be installed on the home page.

Home screen will show up near to top left of the desktop. Apps when launched
will open new windows.



-- ds.heading-medium: Multiple Profiles




-- ds.heading-medium: Custom Protocol: `kulfi://<id52>/path/`

Kulfi is using Tauri's custom protocol feature to listen for `kulfi://` protocol.

-- ds.code: Sample Code
lang: rs

#[cfg_attr(mobile, tauri::mobile_entry_point)]
pub fn run() {
    tauri::Builder::default()
        .plugin(tauri_plugin_opener::init())
        .invoke_handler(tauri::generate_handler![greet])
        .register_asynchronous_uri_scheme_protocol("kulfi", |_ctx, request, responder| { ;; <hl>
            let path = request.uri().to_string();                                        ;; <hl>
            responder.respond(                                                           ;; <hl>
                http::Response::builder()                                                ;; <hl>
                    .body(format!("yo: {path}").into_bytes())                            ;; <hl>
                    .unwrap(),                                                           ;; <hl>
            );                                                                           ;; <hl>
        })                                                                               ;; <hl>
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}

-- ds.copy-regular:

In above code we are using [`tauri::Builder.register_asynchronous_uri_scheme_protocol()`][1]
to register an async handler that is called with http request etc. In our
current code we have "control server", this handler will call the control
server's http handler without listening on actual port.

[1]: https://docs.rs/tauri/2.5.0/tauri/struct.Builder.html#method.register_asynchronous_uri_scheme_protocol

-- end: ds.site-page
